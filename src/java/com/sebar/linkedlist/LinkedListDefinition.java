package com.sebar.linkedlist;

/**
 * lg
 * 链表定义
 */
public class LinkedListDefinition {
    /**
     *1.不需要连续的内存空间，但是存储相同类型的数据
     */
    /**
     * 2.通过“指针”将一组零散的内存块串联起来使用，我们把内存块成为链表的“结点”
     *   结点不单单是存储数据还需要存放下一个结点的地址，双向链表和循环链表则需要记录上一个结点的地址
     *   指向下一个结点地址的指针称为后继指针next
     */
    /**
     * 3. 链表插入、删除数据的时候不需要维持连续的内存空间，则不需要搬迁结点，所以插入或删除数据响应极快，只需要考虑相邻结点的指针改变
     * 弊端：链表要随机访问第K个元素，就需要根据指针一个结点一个结点的依次遍历下去，直到找到相应的结点
     */
    /**
     * 分类：单向链表、双向链表、循环链表
     *  单向链表的尾结点指针指向空地址，表示这就是最后的结点了
     *  循环链表的尾结点指针是指向链表的头结点
     *  双向链表：结点具有后继指针next和前驱指针prev
     */

}
